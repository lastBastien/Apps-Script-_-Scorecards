function emailSend() {
  var ui = SpreadsheetApp.getUi();
  let toField = PropertiesService.getScriptProperties().getProperty('to');
  let ccField = PropertiesService.getScriptProperties().getProperty('cc');

    let coachEmail = ui.prompt('Please enter the Specialist email address:', ui.ButtonSet.OK_CANCEL);
    if (coachEmail.getSelectedButton() == ui.Button.OK){
      toField = coachEmail.getResponseText();
      PropertiesService.getScriptProperties().setProperty("to", toField);
    }else if (coachEmail.getSelectedButton() == ui.Button.CANCEL){
      throw new Error ('sending cancelled');
    };        
    //Logger.log(response);
    
  let managerEmail = ui.prompt("Please enter emails for manager, and manager's manager (separated by commas)", ui.ButtonSet.OK_CANCEL);
    if (managerEmail.getSelectedButton() == ui.Button.OK){
      ccField = managerEmail.getResponseText();
      PropertiesService.getScriptProperties().setProperty("cc", ccField);           
    }else if (managerEmail.getSelectedButton() == ui.Button.CANCEL){
      throw new Error ('sending cancelled');
    };

  const SHEET = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Raw Rollup Data');
    //protections are set from the scorecard to prevent sending while a score is being submitted. Will not run if no scorecard is active.
    if (SHEET.getProtections(SpreadsheetApp.ProtectionType.SHEET)=='Submission Lock'){
      //let ui = SpreadsheetApp.getUi();
      ui.alert('⚠️ A QAA Scorecard is being submitted. Please wait and try again later. ⚠️',
      ui.ButtonSet.OK);
      Logger.log(SHEET.getProtections(SpreadsheetApp.ProtectionType.SHEET));
      return;
    }else{

  //Confirmation Popup

      //let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Raw Rollup Data');
      //let ui = SpreadsheetApp.getUi();
      let activeRow = SHEET.getActiveRange().getRow();
      let rowIndex = SHEET.getActiveRange().getRowIndex();
      let coachName =  SHEET.getRange(activeRow,3).getDisplayValue();
      let self = Session.getActiveUser();
        
      if (SHEET.getActiveCell().offset(0,-1).getDisplayValue() == ''){
        ui.alert(
      '⚠️ There is no record on row '+ rowIndex,
      'Please check that you have selected the correct record.',
        ui.ButtonSet.OK);
        throw 'action cancelled';

    
    }else if (SHEET.getActiveCell().getValue()=='Email Sent'){

      let response = ui.alert(
    '⚠️ The email for '+coachName+' has already been sent',
    'Please confirm you have selected the correct review.',
      ui.ButtonSet.OK);{
        throw 'action cancelled';
      }
      }
      if (SHEET.getActiveCell().offset(0,-1).getDisplayValue() == '0'){
      let response = ui.alert(
    '⭐ There are no Learning Opportunities on this call for '+coachName+' ⭐',
    'Would you like to send the "Gold Star Email" to:\n\n '+toField+'\n And CC: \n'+ccField,
      ui.ButtonSet.YES_NO);
        if (response == ui.Button.YES) {
          positiveEmailSend();
          throw 'Gold Star Email Sent';
        } else if (response == ui.Button.NO){
          throw "action cancelled";
        }
    }else if (SHEET.getActiveCell().getValue()){
      let response = ui.alert(
    '⚠️ Please confirm you want to compile and send this scorecard for '+coachName+' ⚠️',
    'Are you sure you want to compile and send the email to:\n\n '+toField+'\n And CC: \n'+ccField+'?',
      ui.ButtonSet.YES_NO);{
      
    if (response == ui.Button.NO) {
      throw "action cancelled";
    }else if (response == ui.Button.YES){
      
  
    let headers = SHEET.getRange(1, 1, 1, SHEET.getLastColumn()).getValues();
      let caseCol = headers[0].indexOf('Case Link')+1;
      let nameCol = headers[0].indexOf("Specialist Name")+1;
      let sentEmail = headers[0].indexOf('Send Email?')+1; 
      let cardLink = headers[0].indexOf('Scorecard Link')+1;
  
    let activeRow = SHEET.getActiveRange().getRow();
    let user = Session.getActiveUser().getEmail();
    let name = SHEET.getRange(activeRow,nameCol).getValue();
    let call = SHEET.getRange(activeRow,caseCol).getDisplayValue();
    let lastCol = SHEET.getLastColumn();
    let card = SHEET.getRange(activeRow,cardLink).getDisplayValue();
    //arraComp is not the most accurate as it's not just compliance. Encompases any "No" on the scorecard
    let arrayComp = [];
      let arrayCompCat = [];
      let arrayCompLink = []; 
    let arrayOpp = [];
      let arrayOppCat =[];
      let arrayOppLink = [];
    let arrayPos = [];
      let arrayPosCat =[];

    let arrayCoaching = [];
    let arrayLearning = [];
    let arrayPositive = [];
    

  // loop to pull any NO measures from the call
  for (let i=2; i<=lastCol; i++){
    if (SHEET.getRange(activeRow,[i]).getValue()=='No'){
      let complianceNotes = SHEET.getRange(activeRow,[i+1]).getValue();
      //let accuracyNotes = SHEET.getRange(activeRow,accuracyCol).getValue();
      let link = SHEET.getRange(activeRow,[i+2]).getDisplayValue();
      //let accLink = SHEET.getRange(activeRow,accuracyGuru).getDisplayValue();
        if (complianceNotes !== ''){
      arrayComp.push(complianceNotes);
      arrayCompCat.push(SHEET.getRange(1,[i]).getDisplayValue());
      //}
        //if (link !== ''){
      arrayCompLink.push(link);}
    }   
  };
    // loop to pull any COACHING OPPORTUNITY measures from the call
  for (let k=2; k<=lastCol; k++){
    if (SHEET.getRange(activeRow,[k]).getValue()=='Coaching Opportunity'){
      let opportunityNotes = SHEET.getRange(activeRow,[k+1]).getValue();
   
      let oppLink = SHEET.getRange(activeRow,[k+2]).getDisplayValue();
      //let accLink = SHEET.getRange(activeRow,accuracyGuru).getDisplayValue();
        if (opportunityNotes !== ''){
      arrayOpp.push(opportunityNotes);
      arrayOppCat.push(SHEET.getRange(1,[k]).getDisplayValue());
      }
        if (oppLink !== ''){
      arrayOppLink.push(oppLink);}
    }
  }
    //loop to look for positive comments. Captures if the score is "Yes" AND there is a comment present for the measure.
  for (let m=2; m<=lastCol; m++){
    if (SHEET.getRange(activeRow,[m]).getValue()=='Yes' && SHEET.getRange(activeRow,[m+1]).getValue()!=''){
      let positiveCallout = SHEET.getRange(activeRow,[m+1]).getValue();

      arrayPos.push(positiveCallout);
      arrayPosCat.push(SHEET.getRange(1,[m]).getDisplayValue());
      }
             
  };
  const TEMPLATE = HtmlService.createTemplateFromFile('emailTemplate');
    
        // pulls the first name from column 1 based on the active row
    TEMPLATE.name = name.split(' ')[0];
        // pulls quotes and notes for measures scored "NO" to the applicable array
    for (let j=0;j<arrayComp.length;j++){
        // pulls quotes and notes for measures scored "Coaching Opportunity" to the applicable array
        //if else statement separates if there is a knowlege resource link present and if not, does not include
        if (arrayComp[j] && arrayCompLink[j]){
        arrayLearning.push([j+1]+')' + ' '+ arrayComp[j] +  ' This learning opportunity falls under the category of ' +arrayCompCat[j]+'. '+' Please review this resource for more information: '+ arrayCompLink[j]+'.'+'\n\n');
      } else {
        arrayLearning.push([j+1]+')' + ' '+ arrayComp[j] +  ' This learning opportunity falls under the category of '+arrayCompCat[j]+'.'+'\n\n');
      }}
    for (let l=0; l<arrayOpp.length; l++){
        // operates identical to the Compliance array loops, but looks for "Coaching Opportunities"
        if (arrayOpp[l] && arrayOppLink[l]){
        arrayCoaching.push([l+1]+')'+' '+arrayOpp[l] +  ' This learning opportunity falls under the category of ' +arrayOppCat[l]+' Please review this resource for more information: '+ arrayOppLink[l]+'.'+'\n\n');
      } else {
        arrayCoaching.push([l+1]+')'+' '+arrayOpp[l] +  ' This learning opportunity falls under the category of ' +arrayOppCat[l]+'.'+'\n\n')
      }}
    // pulls quotes and notes for measures scored "YES" to the applicable array
    for (let h=0;h<arrayPos.length;h++){
      arrayPositive.push([h+1]+')'+' '+arrayPos[h] +  ' This is a good example of ' +arrayPosCat[h]+'!'+'\n\n');
    }

      //all template arrays have a null join to make the line breaks in the template look correct when email is sent
    TEMPLATE.lo = arrayLearning.join('');
    TEMPLATE.co = arrayCoaching.join('');
    TEMPLATE.positive = arrayPositive.join('');
    TEMPLATE.call = call;
    TEMPLATE.LOnumber = arrayComp.length;
    TEMPLATE.COnumber = arrayOpp.length;
    TEMPLATE.scorecard = card;

    const message = TEMPLATE.evaluate().getContent();

    let aliases = GmailApp.getAliases(); 
      GmailApp.sendEmail(toField, '<Alert> Learning Opportunity', "",{
        cc: ccField,
        bcc: 'qa@guild.com',
        name: 'QA',
        from: 'qa@guild.com',
        htmlBody: message,
      });
        //changes the checkbox to say "email sent" which the confirmationPopup will look for to prevent duplicate sends
      SHEET.getRange(activeRow,sentEmail).setValue('Email Sent');
      
      
      }};
  }}     
  }
    
